plugins {
    alias libs.plugins.androidApplication
    alias libs.plugins.jetbrainsKotlinAndroid
    alias libs.plugins.kotlin.parcelize
    alias libs.plugins.room
    alias libs.plugins.ksp
}

android {
    namespace 'ltd.finelink.read'
    compileSdk 34

    signingConfigs {
        if (project.hasProperty("RELEASE_STORE_FILE")) {
            myConfig {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
                v1SigningEnabled true
                v2SigningEnabled true
                enableV3Signing = true
                enableV4Signing = true
            }
        }
    }
    defaultConfig {
        applicationId "ltd.finelink.read"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0.0"
        project.ext.set("archivesBaseName", name + "_" + version)
        buildConfigField "String", "Cronet_Version", "\"$CronetVersion\""
        buildConfigField "String", "Cronet_Main_Version", "\"$CronetMainVersion\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

    }

    buildTypes {
        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.myConfig
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix 'debug'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'cronet-proguard-rules.pro'
        }
    }

    flavorDimensions = ['mode']
    productFlavors {
        app {
            dimension "mode"
            manifestPlaceholders.put("APP_CHANNEL_VALUE", "app")
        }
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            def flavor = variant.productFlavors[0].name
            outputFileName = "${name}_${flavor}_${defaultConfig.versionName}.apk"
        }
    }

    room {
        schemaDirectory "$projectDir/schemas"
    }

    ksp {
        arg("room.incremental", "true")
        arg("room.expandProjection", "true")
        arg("room.generateKotlin", "false")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        compose true
        buildConfig true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.12'
    }
    packaging {
        resources.excludes.add('META-INF/*')
    }
    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    lint {
        checkDependencies true
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    implementation libs.kotlin.stdlib
    //Kotlin反射
    //noinspection GradleDependency,DifferentStdlibGradleVersion
    implementation libs.kotlin.reflect

    //协程
    implementation libs.bundles.coroutines


    //图像处理库Toolkit
    implementation libs.renderscript.intrinsics.replacement.toolkit


    //androidX
    implementation(libs.appcompat.appcompat)
    implementation(libs.activity.ktx)
    implementation(libs.fragment.ktx)
    implementation(libs.preference.ktx)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.swiperefreshlayout)
    implementation(libs.androidx.viewpager2)
    implementation(libs.androidx.webkit)

    //google
    implementation(libs.material)
    implementation(libs.flexbox)
    implementation(libs.gson)

    //lifecycle
    implementation(libs.lifecycle.common.java8)
    implementation(libs.lifecycle.service)

    //media
    implementation(libs.media.media)
    // For media playback using ExoPlayer
    implementation(libs.media3.exoplayer)
    // For loading data using the OkHttp network stack
    implementation(libs.media3.datasource.okhttp)

    //Splitties
    implementation(libs.splitties.appctx)
    implementation(libs.splitties.systemservices)
    implementation(libs.splitties.views)

    //room sql语句不高亮解决方法https://issuetracker.google.com/issues/234612964#comment6
    implementation(libs.room.runtime)
    implementation(libs.room.ktx)
    ksp(libs.room.compiler)
    androidTestImplementation(libs.room.testing)

    //liveEventBus
    implementation(libs.liveeventbus)

    //规则相关
    implementation(libs.jsoup)
    implementation(libs.json.path)
    implementation(libs.jsoupxpath)
    implementation(project(path: ':modules:book'))

    //JS rhino
    implementation(project(path: ':modules:rhino1.7.3'))

    implementation(project(path: ':modules:mlc4j'))

    //网络
    implementation(libs.okhttp)
    implementation(fileTree(dir: 'cronetlib', include: ['*.jar', '*.aar']))
    implementation(libs.protobuf.javalite)

    //Glide
    implementation(libs.glide.glide)
    ksp(libs.glide.ksp)

    //Svg
    implementation(libs.androidsvg)
    //Glide svg plugin
    implementation(libs.glide.svg)

    //二维码
    //noinspection GradleDependency
    implementation(libs.zxing.lite)
    //颜色选择
    implementation(libs.colorpicker)
    //压缩解压
    implementation libs.libarchive
    //apache
    implementation(libs.commons.text)
    //MarkDown
    implementation(libs.markwon.core)
    implementation(libs.markwon.image.glide)
    implementation(libs.markwon.ext.tables)
    implementation(libs.markwon.html)
    //转换繁体
    implementation(libs.quick.chinese.transfer.core)
    implementation(libs.hutool.crypto)


    implementation libs.pytorch
    implementation libs.pinyin
    implementation libs.wanakana
    implementation libs.kuromoji

    implementation libs.nanohttpd.nanohttpd
    implementation libs.nanohttpd.websocket


}